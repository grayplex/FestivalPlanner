// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Festival {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  startDate DateTime
  endDate   DateTime
  location  String?
  stages    Stage[]
  sets      Set[]
  plans     Plan[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stage {
  id         String   @id @default(cuid())
  name       String
  festival   Festival @relation(fields: [festivalId], references: [id])
  festivalId String
  sets       Set[]
}

model Set {
  id         String     @id @default(cuid())
  artist     String
  date       DateTime
  startTime  DateTime
  endTime    DateTime
  stage      Stage      @relation(fields: [stageId], references: [id])
  stageId    String
  festival   Festival   @relation(fields: [festivalId], references: [id])
  festivalId String
  planItems  PlanItem[]
}

model User {
  id       String    @id @default(cuid())
  name     String?
  email    String?   @unique
  image    String?
  plans    Plan[]
  accounts Account[]
  sessions Session[]
}

model Plan {
  id         String     @id @default(cuid())
  name       String?
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  festival   Festival   @relation(fields: [festivalId], references: [id])
  festivalId String
  items      PlanItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([userId, festivalId])
}

model PlanItem {
  id     String @id @default(cuid())
  plan   Plan   @relation(fields: [planId], references: [id])
  planId String
  set    Set    @relation(fields: [setId], references: [id])
  setId  String

  @@unique([planId, setId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
